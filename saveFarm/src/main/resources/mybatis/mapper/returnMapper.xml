<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.ReturnMapper">
    <insert id="insertReturn" parameterType="com.sp.app.model.Return">
        <selectKey keyProperty="returnNum" resultType="long" order="BEFORE">
            SELECT return_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO return(returnNum, reqDate, reason, quantity, orderDetailNum, status)
        	VALUES(#{returnNum}, SYSDATE, #{reason}, #{quantity}, #{orderDetailNum}, #{status})
    </insert>

    <update id="updateReturn" parameterType="com.sp.app.model.Return">
        UPDATE return
        <set>
            <if test="status != null">status = #{status},</if>
            <if test="status == 2 and returnDate == null">returnDate = SYSDATE,</if>
        </set>
        WHERE returnNum = #{returnNum}
    </update>

    <delete id="deleteReturn" parameterType="long">
        DELETE FROM return WHERE returnNum = #{returnNum}
    </delete>
    
    <sql id="where-list">
		<if test="status != null">
			<choose>
				<when test="status == 0">
					AND status = 0
				</when>
				<when test="status == 1">
					AND status = 1
				</when>
				<when test="status == 2">
					AND status = 2
				</when>
				<when test="status == 3">
					AND status = 3
				</when>
			</choose>
		</if>
	</sql>
	
	<select id="getDataCount" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM return r
		JOIN orderDetail od ON r.orderDetailNum = od.orderDetailNum
		JOIN productOrder po ON po.orderNum = od.orderNum
		JOIN member2 m ON po.memberId = m.memberId
		<where>
			<include refid="where-list"/>
		</where>
	</select>
	
	<select id="getMyProcessedReturnQuantity" parameterType="map" resultType="int">
		SELECT QUANTITY
		FROM return r
		JOIN orderDetail od ON r.orderDetailNum = od.orderDetailNum
		JOIN productOrder po ON po.orderNum = od.orderNum
		WHERE po.memberId = #{memberId} AND od.orderDetailNum = #{orderDetailNum} AND status != 2
	</select>
	
	<select id="getMyReturnDataCount" parameterType="long" resultType="int">
		SELECT COUNT(*)
		FROM return r
		JOIN orderDetail od ON r.orderDetailNum = od.orderDetailNum
		JOIN productOrder po ON po.orderNum = od.orderNum
		WHERE po.memberId = #{memberId}
	</select>
	
	<select id="getReturnInfo" parameterType="map" resultType="com.sp.app.model.Return">
		SELECT RETURNNUM, TO_CHAR(reqDate, 'YYYY-MM-DD HH24:MI') reqDate, REASON, QUANTITY, TO_CHAR(RETURNDATE, 'YYYY-MM-DD HH24:MI') RETURNDATE, r.ORDERDETAILNUM, STATUS,
			po.memberId, email, od.productNum, productName, po.orderState, po.orderNum, qty orderQuantity
		FROM return r
		JOIN orderDetail od ON r.orderDetailNum = od.orderDetailNum
		JOIN product p ON p.productNum = od.productNum
		JOIN productOrder po ON po.orderNum = od.orderNum
		JOIN member2 m ON po.memberId = m.memberId
		<where>
			RETURNNUM = #{num}
			<include refid="where-list"/>
		</where>
	</select>
	
	<select id="getReturnList" parameterType="map" resultType="com.sp.app.model.Return">
		SELECT RETURNNUM, TO_CHAR(reqDate, 'YYYY-MM-DD HH24:MI') reqDate, REASON, QUANTITY, TO_CHAR(RETURNDATE, 'YYYY-MM-DD HH24:MI') RETURNDATE, r.ORDERDETAILNUM, STATUS,
			po.memberId, email
		FROM return r
		JOIN orderDetail od ON r.orderDetailNum = od.orderDetailNum
		JOIN productOrder po ON po.orderNum = od.orderNum
		JOIN member2 m ON po.memberId = m.memberId
		<where>
			<include refid="where-list"/>
		</where>
		ORDER BY REQDATE DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="getMyReturnList" parameterType="map" resultType="com.sp.app.model.Return">
		SELECT RETURNNUM, TO_CHAR(reqDate, 'YYYY-MM-DD HH24:MI') reqDate, REASON, QUANTITY, TO_CHAR(RETURNDATE, 'YYYY-MM-DD HH24:MI') RETURNDATE, r.ORDERDETAILNUM, STATUS,
			po.memberId, email
		FROM return r
		JOIN orderDetail od ON r.orderDetailNum = od.orderDetailNum
		JOIN productOrder po ON po.orderNum = od.orderNum
		JOIN member2 m ON po.memberId = m.memberId
		WHERE po.memberId = #{memberId}
		ORDER BY REQDATE DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
</mapper>