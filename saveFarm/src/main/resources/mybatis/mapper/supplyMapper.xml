<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.farm.mapper.SupplyMapper">

  <!-- 공용 WHERE 절 -->
  <sql id="WhereList">
    <!-- ★ stateList / state 배타 처리 -->
    <choose>
      <when test="stateList != null and stateList.size() > 0">
        AND s.state IN
        <foreach collection="stateList" item="st" open="(" separator="," close=")">
          #{st}
        </foreach>
      </when>
      <when test="state != null and state != -1">
        AND s.state = #{state}
      </when>
    </choose>

    <if test="productNumOnly != null and productNumOnly == 1">
      AND s.productNum IS NOT NULL
    </if>

    <!-- harvestDate -->
    <if test="fromDate != null and toDate != null">
      AND s.harvestDate &gt;= TO_DATE(#{fromDate}, 'YYYY-MM-DD')
      AND s.harvestDate &lt;  TO_DATE(#{toDate},   'YYYY-MM-DD') + 1
    </if>
    <if test="fromDate != null and toDate == null">
      AND s.harvestDate &gt;= TO_DATE(#{fromDate}, 'YYYY-MM-DD')
    </if>
    <if test="fromDate == null and toDate != null">
      AND s.harvestDate &lt;  TO_DATE(#{toDate},   'YYYY-MM-DD') + 1
    </if>

    <!-- approvedDate -->
    <if test="approvedFrom != null and approvedTo != null">
      AND s.approvedDate &gt;= TO_DATE(#{approvedFrom}, 'YYYY-MM-DD')
      AND s.approvedDate &lt;  TO_DATE(#{approvedTo},   'YYYY-MM-DD') + 1
    </if>
    <if test="approvedFrom != null and approvedTo == null">
      AND s.approvedDate &gt;= TO_DATE(#{approvedFrom}, 'YYYY-MM-DD')
    </if>
    <if test="approvedFrom == null and approvedTo != null">
      AND s.approvedDate &lt;  TO_DATE(#{approvedTo},   'YYYY-MM-DD') + 1
    </if>

    <!-- 검색 -->
    <if test="kwd != null and kwd.trim() != ''">
      <choose>
        <when test="schType == 'varietyName'">
          AND LOWER(v.varietyName) LIKE '%' || LOWER(#{kwd}) || '%' ESCAPE '\'
        </when>
        <when test="schType == 'rescuedApply'">
          AND TO_CHAR(s.rescuedApply) LIKE '%' || #{kwd} || '%'
        </when>
        <when test="schType == 'coment'">
          AND LOWER(s.coment) LIKE '%' || LOWER(#{kwd}) || '%' ESCAPE '\'
        </when>
        <otherwise>
          AND (
            LOWER(v.varietyName) LIKE '%' || LOWER(#{kwd}) || '%' ESCAPE '\'
            OR LOWER(s.coment)    LIKE '%' || LOWER(#{kwd}) || '%' ESCAPE '\'
          )
        </otherwise>
      </choose>
    </if>
    <if test="rescuedApply != null and rescuedApply != -1">
      AND s.rescuedApply = #{rescuedApply}
    </if>

    <if test="farmNum != null">
      AND s.farmNum = #{farmNum}
    </if>

    <if test="productNum != null and productNum != -1">
      AND s.productNum = #{productNum}
    </if>

    <if test="varietyNum != null and varietyNum != -1">
      AND s.varietyNum = #{varietyNum}
    </if>
  </sql>

  <!-- INSERT -->
  <insert id="insertSupply" parameterType="com.sp.app.farm.model.Supply">
    INSERT INTO supply
    (
      supplyNum, supplyQuantity, unitQuantity, unitPrice,
      harvestDate, state, rescuedApply, coment, approvedDate,
      farmNum, productNum, varietyNum
    )
    VALUES
    (
      supply_seq.NEXTVAL, #{supplyQuantity}, #{unitQuantity}, #{unitPrice},
      #{harvestDate}, #{state}, #{rescuedApply}, #{coment, jdbcType=VARCHAR}, #{approvedDate, jdbcType=DATE},
      #{farmNum}, #{productNum, jdbcType=NUMERIC}, #{varietyNum}
    )
  </insert>

  <insert id="insertCrops" parameterType="com.sp.app.farm.model.Supply">
    INSERT INTO supply
    (
      supplyNum, supplyQuantity, unitQuantity, unitPrice,
      harvestDate, state, rescuedApply, coment, approvedDate,
      farmNum, productNum, varietyNum
    )
    VALUES
    (
      supply_seq.NEXTVAL, #{supplyQuantity}, 0, 0,
      #{harvestDate}, 0, 0, #{coment, jdbcType=VARCHAR}, #{approvedDate, jdbcType=DATE},
      #{farmNum}, #{productNum, jdbcType=NUMERIC}, #{varietyNum}
    )
  </insert>

  <!-- UPDATE -->
  <update id="updateSupply" parameterType="com.sp.app.farm.model.Supply">
    UPDATE supply
    SET
      supplyQuantity = #{supplyQuantity},
      unitQuantity   = #{unitQuantity},
      unitPrice      = #{unitPrice},
      harvestDate    = #{harvestDate},
      state          = #{state},
      rescuedApply   = #{rescuedApply},
      coment         = #{coment, jdbcType=VARCHAR},
      approvedDate   = #{approvedDate, jdbcType=DATE},
      farmNum        = #{farmNum},
      productNum     = #{productNum, jdbcType=NUMERIC},
      varietyNum     = #{varietyNum}
    WHERE supplyNum = #{supplyNum}
  </update>

  <update id="updateState" parameterType="map">
    UPDATE supply SET state = #{state}
    <where>
      <if test="farmNum != null">
        AND farmNum = #{farmNum}
      </if>
      <choose>
        <!-- 다건 -->
        <when test="supplyNums != null and supplyNums.size > 0">
          AND supplyNum IN
          <foreach collection="supplyNums" item="id" open="(" separator="," close=")">
            #{id}
          </foreach>
        </when>
        <!-- 단건 -->
        <when test="supplyNum != null">
          AND supplyNum = #{supplyNum}
        </when>
        <!-- 안전장치 -->
        <otherwise>
          AND 1=0
        </otherwise>
      </choose>
    </where>
  </update>

  <update id="updateState1" parameterType="map">
    UPDATE supply SET state = #{state}, productNum = #{productNum}
    WHERE supplyNum = #{supplyNum}
  </update>

  <update id="updateState2" parameterType="map">
    UPDATE supply SET state = #{state}, approvedDate = SYSDATE
    WHERE supplyNum = #{supplyNum}
  </update>

  <update id="updateProductNum" parameterType="map">
    UPDATE supply SET productNum = #{productNum, jdbcType=NUMERIC}
    WHERE supplyNum = #{supplyNum}
  </update>

  <update id="updateRescuedApply" parameterType="map">
    UPDATE supply SET rescuedApply = #{rescuedApply}
    WHERE supplyNum = #{supplyNum}
  </update>

  <!-- DELETE -->
  <delete id="deleteSupply" parameterType="map">
	DELETE FROM supply
	WHERE supplyNum = #{supplyNum} AND farmNum   = #{farmNum}
  </delete>

  <!-- 셀렉트들 -->
  <select id="listFarmVarieties" parameterType="map"
          resultType="com.sp.app.farm.model.Variety">
    SELECT DISTINCT
           v.varietyNum,
           v.varietyName
    FROM supply s
    JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      s.farmNum = #{farmNum}
      <if test="productNumOnly != null and productNumOnly == 1">
        AND s.productNum IS NOT NULL
      </if>
    </where>
    ORDER BY v.varietyName
  </select>

  <!-- 농가 관리용 쿼리 -->
  <select id="listManageSupply" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      s.supplyNum, s.supplyQuantity, s.unitQuantity, s.unitPrice,
      s.harvestDate, s.state, s.rescuedApply, s.coment, s.approvedDate,
      s.farmNum, s.productNum, s.varietyNum, v.varietyName,
      f.farmName, f.businessNumber, f.farmManager, f.farmTel,
      f.farmZip, f.farmAddress1, f.farmAddress2, f.farmRegDate,
      f.farmerName, f.farmerTel, f.farmerId, f.farmerPwd, f.status, f.farmAccount
    FROM supply s
    JOIN variety v ON s.varietyNum = v.varietyNum
    JOIN farm f    ON f.farmNum   = s.farmNum
    <where>
      <include refid="WhereList"/>
    </where>
    ORDER BY s.supplyNum DESC
    <if test="size != null">
      OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
    </if>
  </select>

  <select id="listSupply" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      s.supplyNum, s.supplyQuantity, s.unitQuantity, s.unitPrice,
      s.harvestDate, s.state, s.rescuedApply, s.coment, s.approvedDate,
      s.farmNum, s.productNum, s.varietyNum, v.varietyName
    FROM supply s
    JOIN variety v ON s.varietyNum = v.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
    ORDER BY s.supplyNum DESC
    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
  </select>

  <select id="listSupplyCount" parameterType="map" resultType="Integer">
    SELECT COUNT(*)
    FROM supply s
    JOIN variety v ON s.varietyNum = v.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
  </select>

  <select id="findBySupplyNum" parameterType="Long" resultType="com.sp.app.farm.model.Supply">
    SELECT
      supplyNum, supplyQuantity, unitQuantity, unitPrice,
      harvestDate, state, rescuedApply, coment, approvedDate,
      s.farmNum, productNum, s.varietyNum, varietyName, farmerId, farmName, farmerName
    FROM supply s
    JOIN farm f ON s.farmNum = f.farmNum
    JOIN variety v ON s.varietyNum = v.varietyNum
    WHERE supplyNum = #{supplyNum}
  </select>

  <!-- WhereList 쓰므로 parameterType=map, alias/LEFT JOIN 추가 -->
<select id="listByFarm" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      s.supplyNum, s.supplyQuantity, s.unitQuantity, s.unitPrice,
      s.harvestDate, s.state, s.rescuedApply, s.coment, s.approvedDate,
      s.farmNum, s.productNum, s.varietyNum, v.varietyName
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
    ORDER BY s.harvestDate ASC, s.supplyNum DESC
    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>

  <select id="farmSupplyListCount" parameterType="map" resultType="Integer">
    SELECT COUNT(*)
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
  </select>

  <!-- ★ 별도 state조건 중복 제거, WhereList에 맡김 -->
  <select id="listByState" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      s.supplyNum, s.supplyQuantity, s.unitQuantity, s.unitPrice,
      s.harvestDate, s.state, s.rescuedApply, s.coment, s.approvedDate,
      s.farmNum, s.productNum, s.varietyNum, v.varietyName
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
  </select>

  <select id="stateListCount" parameterType="map" resultType="Integer">
    SELECT COUNT(*)
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
  </select>

  <!-- ★ rescuedApply 중복 조건 제거, WhereList에 맡김 -->
  <select id="listFindRescuedApply" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      s.supplyNum, s.supplyQuantity, s.unitQuantity, s.unitPrice,
      s.harvestDate, s.state, s.rescuedApply, s.coment, s.approvedDate,
      s.farmNum, s.productNum, s.varietyNum, v.varietyName
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
  </select>

  <select id="rescuedApplyListCount" parameterType="map" resultType="Integer">
    SELECT COUNT(*)
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
  </select>

  <select id="nextSupplyNum" resultType="Long">
    SELECT NVL(MAX(supplyNum), 0) + 1
    FROM supply
  </select>

  <!-- ★ alias/LEFT JOIN 추가 -->
  <select id="monthlyAmount" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      TO_CHAR(s.harvestDate, 'YYYY-MM') AS month,
      SUM(s.supplyQuantity * s.unitPrice) AS totalAmount
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
    GROUP BY TO_CHAR(s.harvestDate, 'YYYY-MM')
    ORDER BY month
  </select>

  <select id="totalsByState" parameterType="map" resultType="map">
    <!-- 필요 시 구현 -->
  </select>

  <!-- ★ alias/LEFT JOIN 추가 -->
  <select id="topVarieties" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT s.varietyNum, SUM(s.supplyQuantity) AS totalQuantity
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      <include refid="WhereList"/>
    </where>
    GROUP BY s.varietyNum
    ORDER BY totalQuantity DESC
    FETCH FIRST #{size} ROWS ONLY
  </select>

  <!-- ★ alias/LEFT JOIN 추가 -->
  <select id="findByPrev" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      s.supplyNum, s.supplyQuantity, s.unitQuantity, s.unitPrice,
      s.harvestDate, s.state, s.rescuedApply, s.coment, s.approvedDate,
      s.farmNum, s.productNum, s.varietyNum, v.varietyName
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      s.supplyNum &lt; #{supplyNum}
      <include refid="WhereList"/>
    </where>
    ORDER BY s.supplyNum DESC
    FETCH FIRST 1 ROWS ONLY
  </select>

  <select id="findByNext" parameterType="map" resultType="com.sp.app.farm.model.Supply">
    SELECT
      s.supplyNum, s.supplyQuantity, s.unitQuantity, s.unitPrice,
      s.harvestDate, s.state, s.rescuedApply, s.coment, s.approvedDate,
      s.farmNum, s.productNum, s.varietyNum, v.varietyName
    FROM supply s
    LEFT JOIN variety v ON v.varietyNum = s.varietyNum
    <where>
      s.supplyNum &gt; #{supplyNum}
      <include refid="WhereList"/>
    </where>
    ORDER BY s.supplyNum ASC
    FETCH FIRST 1 ROWS ONLY
  </select>

</mapper>
