<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.MyShoppingMapper">
	<!-- 장바구니 등록 -->
	<insert id="insertCart" parameterType="com.sp.app.model.Order">
		INSERT INTO cart(cartNum, memberId, productNum, qty, regDate)
		VALUES (cart_seq.NEXTVAL, #{memberId}, #{productNum}, #{qty}, SYSDATE)
	</insert>
	
	<!-- 장바구니 수정 -->
	<update id="updateCart" parameterType="com.sp.app.model.Order">
		UPDATE cart SET qty = #{qty}, regDate = SYSDATE
		WHERE productNum = #{productNum} AND memberId = #{memberId}
	</update>
	
	
	<select id="findByCartId" parameterType="map" resultType="com.sp.app.model.Order">
		SELECT cartNum, memberId, productNum, qty, regDate
		FROM cart
		WHERE productNum = #{productNum} AND memberId = #{memberId}
	</select>
	
	<!-- 유저의 장바구니 리스트 -->
	<select id="listCart" resultType="com.sp.app.model.Order" parameterType="Long">
		SELECT ct.cartNum, ct.memberId, ct.productNum, ct.qty, ct.regDate,
				p.productName, p.deliveryFee, p.mainImageFilename,
				pd.stockQuantity, pd.unit, pd.unitPrice, pd.discountRate
		FROM cart ct
		JOIN (
			SELECT productNum, productName, deliveryFee, mainImageFilename, productClassification
			FROM product
			WHERE productClassification = 100
		) p ON ct.productNum = p.productNum
		LEFT OUTER JOIN productDetail pd ON p.productNum = pd.productNum
		WHERE ct.memberId = #{memberId}
		ORDER BY cartNum DESC
	</select>
	
	<!-- 장바구니 삭제 -->
	<delete id="deleteCart" parameterType="map">
		DELETE FROM cart
		WHERE memberId = #{memberId} 
		<if test="gubun == 'item' ">
			AND productNum = #{productNum}
		</if>
		<if test="gubun == 'list' ">
			AND productNum IN
			<foreach collection="list" item="productNum" index="index"
				open="(" separator="," close=")">
				#{productNum}
			</foreach>
		</if>
	</delete>
	
	<!-- 장바구니 등록 후 15일이 지난 내역 삭제 -->
	<delete id="deleteCartExpiration">
		DELETE FROM cart
		WHERE regDate + 15 &lt; SYSDATE
	</delete>	
	
	<!-- 유저의 장바구니에 담긴 상품 개수 -->
	<select id="getCartSize" parameterType="Long" resultType="Integer">
	   SELECT COUNT(*) cartSize 
	   FROM cart
	   WHERE memberId = #{memberId}
	</select>
	
	<!-- 데스터네이션(배송지) 등록 -->
	<insert id="insertDestination" parameterType="com.sp.app.model.Destination">
		INSERT INTO destination(destinationNum, memberId, addressName, recipientName, defaultDest, 
			tel, zip, addr1, addr2, pickup, accessInfo, passcode, accessSave)
		VALUES (destination_seq.NEXTVAL, #{memberId}, #{addressName, jdbcType=VARCHAR}, 
			#{recipientName}, #{defaultDest},
			#{tel}, #{zip}, #{addr1}, #{addr2}, 
			#{pickup, jdbcType=VARCHAR}, #{accessInfo, jdbcType=VARCHAR}, 
			#{passcode, jdbcType=VARCHAR}, #{accessSave})
	</insert>
	
	<select id="destinationCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM destination
		WHERE memberId = #{memberId}
	</select>
	
	<select id="listDestination" resultType="com.sp.app.model.Destination" parameterType="Long">
    	SELECT destinationNum, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, 
			pickup, accessInfo, passcode, accessSave
    	FROM destination
		WHERE memberId = #{memberId}
		ORDER BY defaultDest DESC, destinationNum DESC
	</select>	
	
	<!-- 기본 배송지 -->
	<select id="defaultDelivery" resultType="com.sp.app.model.Destination" parameterType="Long">
		SELECT destinationNum, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, pickup, 
			accessInfo, passcode, accessSave
		FROM (
			SELECT destinationNum, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, pickup, 
				accessInfo, passcode, accessSave
			FROM destination
			WHERE memberId = #{memberId} AND defaultDest = 1
				UNION ALL
			SELECT destinationNum, memberId, addressName, recipientName, defaultDest, tel, zip, addr1, addr2, pickup, 
				accessInfo, passcode, accessSave
			FROM destination
			WHERE memberId = #{memberId} AND 
				NOT EXISTS (SELECT 1 FROM destination WHERE memberId = #{memberId} AND defaultDest = 1)
			ORDER BY defaultDest DESC, destinationNum DESC
		)
		WHERE ROWNUM = 1
	</select>

	<update id="updateDestination" parameterType="com.sp.app.model.Destination">
		UPDATE destination SET addressName = #{addressName, jdbcType=VARCHAR},  
			recipientName = #{recipientName}, defaultDest = #{defaultDest},
			tel = #{tel}, zip = #{zip}, addr1 = #{addr1}, addr2 = #{addr2},
			pickup = #{pickup, jdbcType=VARCHAR}, accessInfo = #{accessInfo, jdbcType=VARCHAR}, 
			passcode = #{passcode, jdbcType=VARCHAR} 
		WHERE destinationNum = #{destinationNum} AND memberId = #{memberId}
	</update>
	
	<update id="updateDefaultDestination" parameterType="map">
		UPDATE destination SET defaultDest = #{defaultDest}
		WHERE memberId = #{memberId}
		<if test="destinationNum != null">
			AND destinationNum = #{destinationNum}
		</if>
	</update>

	<delete id="deleteDestination" parameterType="map">
		DELETE FROM destination
		WHERE memberId = #{memberId} AND destinationNum = #{destinationNum}
	</delete>

	<!-- 10개를 초과하는 경우 오래된 배송지 삭제 -->	
    <delete id="deleteOldestDestination" parameterType="Long">
        DELETE FROM destination
        WHERE destinationNum IN (
            SELECT destinationNum
            FROM (
                SELECT destinationNum, ROW_NUMBER() OVER (ORDER BY defaultDest DESC, destinationNum DESC) as rn
                FROM destination
                WHERE memberId = #{memberId}
            )
            WHERE rn &gt; 10
        )
    </delete>
</mapper>